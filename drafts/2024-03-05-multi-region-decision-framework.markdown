---
layout: post
title:  "Is a Multi-Cloud Strategy Just About Using Multiple Clouds?"
date:   2024-03-05 10:24:47 +0200
categories: AWS, Multi-Region
---

Many companies have contracts with multiple cloud-providers today. There are several reasons behind this fact. The top reason I hear is companies don't want to be locked-in with just one cloud and be 100% dependent on it. In addition, companies don't want to miss out on features and strengths certain of cloud-providers and they want to be prepared for unforseen events like a service from one cloud-provider is shut down on short notice. The investment it takes to technically maintain multiple cloud providers to be accessible on-demand bei their developer-force in most cases is significant. Spending money here decreases the ability to innovate and drive development of the core products of a company. Chances are high that being locked-in to one cloud might be the least important challenge when a company is not able to keep up with the pace of innovation of the competition. This article shows a people centric approach to multi-cloud. It shows how to keep up with the pace of innovation of competitors and in parallel be able to leverage the strengths of multiple cloud-providers.  

Traditional companies in any industry have a hard time to catch up and accelerate software-development while keeping quality high. Many traditional companies become much better every year in delivering high-quality software on cloud environments. However, the State of DevOps Report shows, that digital native companies have the ability increase the speed of acceleration faster than these traditional companies are able to which makes it alomost impossible to overtake them. 

Giving software-developers the option of choosing between cloud providers implies investing in setting up and maintaining multiple cloud environments that need to meet the security and compliance rules and other regulations and best-prectices of a company. A microservice runtime like Kubernetes might need to be maintained multiple times, or a VPN connection to a data center owned by the company needs to be set-up and maintained multiple times. All of this does not come for free. In addition giving the option to developers to choose freely between a set of clouds can make integration of applications more difficult from a technical as well as from a commercial side. 

Looking at the whole picture again, many companies are well advised to go all-in with one cloud provider as their first revision of their (multi)-cloud-strategy. The reduction in complexity gives developers the opportunity to focus on the core business driving innovation and speed-up software-development. Companies that focus on a possible future vendor-lock-in-problem are risking to miss out on new market opportunities their competitors are pursuing. Being prepared to be able to easily switch between cloud-providers cannot prevent a company of becoming irrelevant. 

Still, there are companies out there that focus on providing what seem to be the right tools for their developers to strife and create business-value. However, I propose to turn arond and focus on the developers themselfes. Developers usually know best how to achieve their task having goals that are clear and measurable. Companies these days need to listen to their developers remove road-blocks, and give them the freedom, time-commitment and learning-offers. 

A multi-cloud-strategy that can be as short as this: 

    **ACME Corp (Multi)-Cloud Strategy**

    We donâ€™t invest time and resources in preparing for a vendor lock-in scenario with a fully integrated multi-cloud setup. Instead, we focus on enhancing our teams' software delivery performance. Besides mitigating the risk of optimizing for a problem that might never occur, we can react to market changes much faster. Adopting a new cloud provider is one option we have in our portfolio.

    We measure our software delivery performance using the four key metrics described in the book *Accelerate*. We improve step by step, working on mastering the 24 capabilities outlined in the book.

I want to stress this argument of focusing on your developers and their productivity by giving an example. Assuming there is a company that is facing the situation of needing to switch cloud providers, for reasons of a price increase. A Company that in the past focused on creating an integrated cloud platform on top of the established cloud-vendors now might feel that their up-front investment eventually pays off. Let's further assume that this company did not invest in the training and continious learning of their development teams. The skills these teams have do not fit to what is needed to be able to seemlessly implement the transition from one cloud provider to the other. In addition these development teams might not be able to adapt and learn who the other cloud provider works. 

As a conclusion, let's compare the approaches of both companies: The first company went all-in with one cloud provider, focusing on the development of hard- and soft-skills of it development force. With the abilities this company now has, it is easier for the developers to learn the new cloud platform, plan, and take the decsions on how to move the applications from one cloud-provider to the other. The second company focused on creating a platform that integrates multiple-cloud providers not providing developers the ability to learn and improve their skills on the way. This company now faces the challenge of having a tool at hand that can help increase the speed to transition from one cloud-provider to the other. However, developes lack the skills needed to operate on the new cloud-platform. They also have a hard time to learn and adapt to this new environment. 
